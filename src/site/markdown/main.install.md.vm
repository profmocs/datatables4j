<h3>Installation guide</h3>

<h4>Step 1 : install the DataTables4j JARs</h4>

<h5>Manually</h5>

The following libraries must be available via the classpath of your application server

<ul>
	<li>datatables4j-core.jar</li>
	<li>other-jar.jar</li>
</ul>

<h5>Using Maven</h5>

You just need to add the following dependency under the <tt>dependencies</tt> section in your <tt>pom.xml</tt> :

    <dependency>
        <groupId>org.datatables4j</groupId>
        <artifactId>datatables4j-core</artifactId>
        <version>${project.version}</version>
    </dependency>

<h4>Step 2 : get jQuery and DataTables</h4>

By default, the Javascript libraries are not embedded in <strong>DataTables4j</strong>. So you must ensure you declared somewhere in your JSP the <tt>script</tt> and <tt>link</tt> tags needed.

    <!-- DataTables -->
    <link href="pathToCss/jquery.dataTables.css" rel="stylesheet">
    <script src="pathToJs/jquery.dataTables.min.js"></script> 
	
	<!-- jQuery -->
	<script src="pathToJs/jquery-1.7.2.min.js"></script>

<h4>Step 3 : define the taglib</h4>

Everywhere you need to display a HTML table using <strong>DataTables4j</strong>, you need to declare the taglib :

	<%@ taglib prefix="datatables" uri="http://github.com/tduchateau/DataTables4j" %>

<h4>Step 4 (optional) : add the DataTables4j servlet definition and mapping</h4>

Depending on what version of the Java EE web stack (Servlet/JSP) you are using, this step may be optional.

For 2.5 and below, you will need to add the servlet definition and mapping to your application's <tt>web.xml</tt> :

    <servlet>
        <display-name>DataTables4j Servlet</display-name>
        <servlet-name>datatablesController</servlet-name>
        <servlet-class>org.datatables4j.web.servlet.DatatablesServlet</servlet-class>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>datatablesController</servlet-name>
        <url-pattern>/datatablesController/*</url-pattern>
    </servlet-mapping>

Since 3.0, you won't need it because the servlet is defined dynamically.

<h4>Step 5 (optional) : add a DataTables4j custom configuration file</h4>

DataTables4j internally uses its configuration file but you can override it creating a file called <strong>datatables4j.properties</strong> available at the root of your classpath.

If you build your application with Maven, it would typically locate under the <tt>src/main/resources</tt> directory.

    ####################################
    # DataTables4j default configuration
    ####################################
    
    # Compressor configuration
    datatables4j.compressor.enable=true
    datatables4j.compressor.class=org.datatables4j.compressor.YuiResourceCompressor
    
    # Aggregator configuration
    datatables4j.aggregator.enable=false
    datatables4j.aggregator.mode=ALL
    
    # Data provider congiguration
    datatables4j.datasource.class=org.datatables4j.datasource.JerseyDataProvider

Just override the property you need in this file and for others, DataTables4j will use default ones.
